# Generated by Django 5.2.4 on 2025-09-09 20:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="QAConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("config_name", models.CharField(max_length=100, unique=True)),
                (
                    "config_type",
                    models.CharField(
                        choices=[
                            ("system", "System Configuration"),
                            ("model", "Model Configuration"),
                            ("retrieval", "Retrieval Configuration"),
                            ("generation", "Generation Configuration"),
                        ],
                        max_length=50,
                    ),
                ),
                ("config_data", models.JSONField(default=dict)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "embedding_model",
                    models.CharField(default="all-MiniLM-L6-v2", max_length=100),
                ),
                (
                    "generation_model",
                    models.CharField(default="gpt-3.5-turbo", max_length=100),
                ),
                ("max_tokens", models.IntegerField(default=1000)),
                ("temperature", models.FloatField(default=0.7)),
                ("top_k_documents", models.IntegerField(default=5)),
                ("similarity_threshold", models.FloatField(default=0.7)),
                ("max_context_length", models.IntegerField(default=4000)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "qa_configurations",
                "ordering": ["-is_default", "config_name"],
            },
        ),
        migrations.CreateModel(
            name="QAQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query_text", models.TextField()),
                (
                    "query_type",
                    models.CharField(
                        choices=[
                            ("legal_question", "Legal Question"),
                            ("case_inquiry", "Case Inquiry"),
                            ("law_research", "Law Research"),
                            ("judge_inquiry", "Judge Inquiry"),
                            ("lawyer_inquiry", "Lawyer Inquiry"),
                            ("court_procedure", "Court Procedure"),
                            ("citation_lookup", "Citation Lookup"),
                            ("general_legal", "General Legal"),
                        ],
                        max_length=50,
                    ),
                ),
                ("processed_query", models.TextField(blank=True, default="")),
                ("query_intent", models.JSONField(blank=True, default=dict)),
                ("query_confidence", models.FloatField(default=0.0)),
                ("context_window", models.JSONField(blank=True, default=list)),
                ("user_context", models.JSONField(blank=True, default=dict)),
                ("processing_time", models.FloatField(default=0.0)),
                ("retrieval_time", models.FloatField(default=0.0)),
                ("generation_time", models.FloatField(default=0.0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("timeout", "Timeout"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True, default="")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "qa_queries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QAKnowledgeBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("case_document", "Case Document"),
                            ("case_metadata", "Case Metadata"),
                            ("legal_text", "Legal Text"),
                            ("judgment", "Judgment"),
                            ("order", "Order"),
                            ("comment", "Comment"),
                            ("statute", "Statute"),
                            ("regulation", "Regulation"),
                        ],
                        max_length=50,
                    ),
                ),
                ("source_id", models.CharField(db_index=True, max_length=100)),
                (
                    "source_case_id",
                    models.IntegerField(blank=True, db_index=True, null=True),
                ),
                (
                    "source_document_id",
                    models.IntegerField(blank=True, db_index=True, null=True),
                ),
                ("title", models.CharField(max_length=500)),
                ("content_text", models.TextField()),
                ("content_summary", models.TextField(blank=True, default="")),
                ("court", models.CharField(blank=True, default="", max_length=100)),
                (
                    "case_number",
                    models.CharField(blank=True, default="", max_length=200),
                ),
                (
                    "case_title",
                    models.CharField(blank=True, default="", max_length=500),
                ),
                (
                    "judge_name",
                    models.CharField(blank=True, default="", max_length=200),
                ),
                ("date_decided", models.DateField(blank=True, null=True)),
                (
                    "legal_domain",
                    models.CharField(blank=True, default="", max_length=100),
                ),
                ("legal_concepts", models.JSONField(blank=True, default=list)),
                ("legal_entities", models.JSONField(blank=True, default=list)),
                ("citations", models.JSONField(blank=True, default=list)),
                ("vector_id", models.CharField(blank=True, default="", max_length=100)),
                (
                    "embedding_model",
                    models.CharField(default="all-MiniLM-L6-v2", max_length=100),
                ),
                ("embedding_dimension", models.IntegerField(default=384)),
                ("content_quality_score", models.FloatField(default=0.0)),
                ("legal_relevance_score", models.FloatField(default=0.0)),
                ("completeness_score", models.FloatField(default=0.0)),
                ("is_indexed", models.BooleanField(default=False)),
                ("is_processed", models.BooleanField(default=False)),
                ("processing_error", models.TextField(blank=True, default="")),
                (
                    "content_hash",
                    models.CharField(db_index=True, max_length=64, unique=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("indexed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "qa_knowledge_base",
                "indexes": [
                    models.Index(
                        fields=["source_type"], name="qa_knowledg_source__bdbdc7_idx"
                    ),
                    models.Index(
                        fields=["source_case_id"], name="qa_knowledg_source__efb599_idx"
                    ),
                    models.Index(
                        fields=["source_document_id"],
                        name="qa_knowledg_source__1003d2_idx",
                    ),
                    models.Index(fields=["court"], name="qa_knowledg_court_161363_idx"),
                    models.Index(
                        fields=["legal_domain"], name="qa_knowledg_legal_d_2ff2ae_idx"
                    ),
                    models.Index(
                        fields=["is_indexed"], name="qa_knowledg_is_inde_55a1c9_idx"
                    ),
                    models.Index(
                        fields=["content_hash"], name="qa_knowledg_content_550d9d_idx"
                    ),
                ],
                "unique_together": {("source_type", "source_id")},
            },
        ),
        migrations.CreateModel(
            name="QAMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("metric_name", models.CharField(db_index=True, max_length=100)),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("performance", "Performance Metric"),
                            ("usage", "Usage Metric"),
                            ("quality", "Quality Metric"),
                            ("system", "System Metric"),
                        ],
                        max_length=50,
                    ),
                ),
                ("metric_value", models.FloatField()),
                ("metric_unit", models.CharField(default="", max_length=20)),
                ("metric_data", models.JSONField(blank=True, default=dict)),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("context_data", models.JSONField(blank=True, default=dict)),
                ("recorded_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "qa_metrics",
                "ordering": ["-recorded_at"],
                "indexes": [
                    models.Index(
                        fields=["metric_name", "recorded_at"],
                        name="qa_metrics_metric__60b84f_idx",
                    ),
                    models.Index(
                        fields=["metric_type"], name="qa_metrics_metric__e59ae8_idx"
                    ),
                    models.Index(
                        fields=["period_start", "period_end"],
                        name="qa_metrics_period__a58163_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="QAResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer_text", models.TextField()),
                (
                    "answer_type",
                    models.CharField(
                        choices=[
                            ("direct_answer", "Direct Answer"),
                            ("explanation", "Explanation"),
                            ("case_summary", "Case Summary"),
                            ("legal_analysis", "Legal Analysis"),
                            ("procedural_guidance", "Procedural Guidance"),
                            ("citation_reference", "Citation Reference"),
                            ("clarification_request", "Clarification Request"),
                        ],
                        max_length=50,
                    ),
                ),
                ("source_documents", models.JSONField(blank=True, default=list)),
                ("source_cases", models.JSONField(blank=True, default=list)),
                ("source_citations", models.JSONField(blank=True, default=list)),
                ("confidence_score", models.FloatField(default=0.0)),
                ("answer_metadata", models.JSONField(blank=True, default=dict)),
                ("reasoning_chain", models.JSONField(blank=True, default=list)),
                ("limitations", models.TextField(blank=True, default="")),
                ("relevance_score", models.FloatField(default=0.0)),
                ("completeness_score", models.FloatField(default=0.0)),
                ("accuracy_score", models.FloatField(default=0.0)),
                (
                    "user_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("user_feedback", models.TextField(blank=True, default="")),
                ("feedback_timestamp", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "query",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="response",
                        to="qa_app.qaquery",
                    ),
                ),
            ],
            options={
                "db_table": "qa_responses",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QASession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_id",
                    models.CharField(db_index=True, max_length=64, unique=True),
                ),
                ("title", models.CharField(blank=True, default="", max_length=200)),
                ("description", models.TextField(blank=True, default="")),
                ("context_data", models.JSONField(blank=True, default=dict)),
                ("conversation_history", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_archived", models.BooleanField(default=False)),
                ("total_queries", models.IntegerField(default=0)),
                ("successful_queries", models.IntegerField(default=0)),
                ("average_response_time", models.FloatField(default=0.0)),
                (
                    "user_satisfaction_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qa_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "qa_sessions",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.AddField(
            model_name="qaquery",
            name="session",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="queries",
                to="qa_app.qasession",
            ),
        ),
        migrations.CreateModel(
            name="QAFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating from 1 (poor) to 5 (excellent)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("feedback_text", models.TextField(blank=True, default="")),
                (
                    "accuracy_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "relevance_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "completeness_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "clarity_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("user_rating", "User Rating"),
                            ("expert_review", "Expert Review"),
                            ("system_evaluation", "System Evaluation"),
                        ],
                        default="user_rating",
                        max_length=50,
                    ),
                ),
                ("is_helpful", models.BooleanField(blank=True, null=True)),
                ("would_recommend", models.BooleanField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qa_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "response",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="qa_app.qaresponse",
                    ),
                ),
            ],
            options={
                "db_table": "qa_feedback",
                "ordering": ["-created_at"],
                "unique_together": {("response", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="qasession",
            index=models.Index(
                fields=["session_id"], name="qa_sessions_session_3926c6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qasession",
            index=models.Index(
                fields=["user", "is_active"], name="qa_sessions_user_id_d0c56b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qasession",
            index=models.Index(
                fields=["created_at"], name="qa_sessions_created_9cbc90_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qaquery",
            index=models.Index(
                fields=["session", "created_at"], name="qa_queries_session_43578e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qaquery",
            index=models.Index(
                fields=["query_type"], name="qa_queries_query_t_a8d83c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="qaquery",
            index=models.Index(fields=["status"], name="qa_queries_status_123537_idx"),
        ),
    ]
